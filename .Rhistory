factor_variance = paste0(factor_names[i]," ~~ 2*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
}
return(lavaan_text)
}
# Returns the observed pairwise complete covariance matrix.
get_obs_cov <- function(d) {
d <- d[, colSums(is.na(d)) < nrow(d)] # Remove columns which only contain NA
obs_cov <- cov(d, method = "pearson", use = "pairwise.complete.obs")
obs_cov
}
# Returns factor covariance estimates from an sem object.
fac_cov_estimates <- function(sem) {
n_factors <- sem$m - sem$n
coef <- fac2char(sem::stdCoef(sem))
n_coef <- nrow(sem::stdCoef(sem))
n_combins <- ncol(combn(n_factors,2))
factor_coef <- coef[(n_coef-n_combins+1):n_coef, 1:2]
colnames(factor_coef) <- c("covariance", "estimate")
rownames(factor_coef) <- NULL
factor_coef
}
fac_cov_estimates_lavaan <- function(lavaan_model) {
pars_est = lavaan_model |> parameterestimates()
n_factors <- sem$m - sem$n
coef <- fac2char(sem::stdCoef(sem))
n_coef <- nrow(sem::stdCoef(sem))
n_combins <- ncol(combn(n_factors,2))
factor_coef <- coef[(n_coef-n_combins+1):n_coef, 1:2]
colnames(factor_coef) <- c("covariance", "estimate")
rownames(factor_coef) <- NULL
factor_coef
}
# Check arguments
if(!all(unlist(lapply(d, is.data.frame)))) {
stop("Check the 'd' argument in function rosetta::rosetta(). 'd' needs to be a list of dataframes.")
} # TODO: maybe a better test here (e.g. "is.null", all so check whether || or | is more appropriate)
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta::rosetta(). 'factor_structure' needs to be a named list.")
}
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'missing_corr' argument in function rosetta::rosetta(). 'missing_corr' can only take on values 'normal' or 'missing'.")
}
# check if there are any fully NA columns in each dataset and remove them
for(i in seq_along(d)) {
d[[i]] <- Filter(function(x)!all(is.na(x)), d[[i]])
}
message(missing_corr)
# step 1. unconstrained model
## sem RAM text
lavaan_model <- lavaan_model(factor_structure)
lavaan_model
eq_along(factor_names)
pars_est
factor_structure
factor_structure |> names()
lavaan_model |> parameterestimates()
# Returns a character vector of the 'RAM' model for rosetta
lavaan_model
lavaan_model
unconstrained_fit <- sem::sem(
model = sem_model,
S = obs_cov,
N = ncol(obs_cov)
)
unconstrained_fit
## the overall lavaan fit
unconstrained_fit <- lavaan::cfa(model = lavaan_model, sample.cov = obs_cov,
sample.nobs = nrow(data))
## the overall lavaan fit
unconstrained_fit
unconstrained_fit |> parameterestimates()
ooo=unconstrained_fit |> parameterestimates()
ooo$lhs
pars_est$lhs==factor_names[i]
lavaan_model_obj = unconstrained_fit
lavaan_model_obj
lavaan_model_obj |> parameterestimates()
pars_est$lhs==factor_names[i]
pars_est = lavaan_model_obj |> parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est
pars_est$lhs==factor_names[i]
factor_names[i]
i=1
pars_est |> filter(lhs==factor_names[i]) |>
filter(op ==  '~~') |> filter(op ==  factor_names[i+1])
pars_est
pars_est |> filter(lhs == factor_names[i])
pars_est$lhs
pars_est$lhs
(pars_est$lhs == factor_names[i])
(pars_est$op ==  '~~')
pars_est |> select(lhs)
pars_est |> select('lhs')
pars_est |> dplyr::select('lhs')
pars_est |> dplyr::select('lhs','op')
pars_est |> dplyr::select('lhs','op','rhs','est')
pars_est[,c('lhs','op','rhs','est')]
pars_est = lavaan_model_obj |> parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est[,c('lhs','op','rhs','est')]
pars_est = pars_est[,c('lhs','op','rhs','est')]
pars_est
(pars_est$lhs == factor_names[i])
pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
]
pars_est = lavaan_model_obj |> parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est = pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
c('lhs','op','rhs','est')]
pars_est
fac_cov_estimates_lavaan(unconstrained_fit)
unconstrained_fit <- lavaan::cfa(model = lavaan_model,
sample.cov = obs_cov,
sample.nobs = nrow(data))
## factor covariance estimates
unconstrained_factor_cov <- fac_cov_estimates_lavaan(unconstrained_fit)
unconstrained_fit
fac_cov_estimates_lavaan <- function(lavaan_model_obj,factor_structure) {
pars_est = lavaan_model_obj |> lavaan::parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est = pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
c('lhs','op','rhs','est')]
return(pars_est)
}
factor_structure
## factor covariance estimates
unconstrained_factor_cov <- fac_cov_estimates_lavaan(unconstrained_fit,factor_structure)
unconstrained_factor_cov
constrained_struc
unconstrained_fit
d
d[[1]]
x=d[[1]]
constrained_struc <- lapply(factor_structure, function(y) {
intersect(names(x), y)
})
constrained_struc
lavaan_model(constrained_struc, unconstrained_fit)
lavaan_model
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model <- function(factor_structure,lavaan_obj=NULL) {s
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_ests[(fac_cov_ests$lhs==factor_names[i]) &
(fac_cov_ests$rhs==factor_names[j]),"est"],"*", factor_names[j])
}
}
}
return(lavaan_text)
}
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model <- function(factor_structure,lavaan_obj=NULL) {
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_ests[(fac_cov_ests$lhs==factor_names[i]) &
(fac_cov_ests$rhs==factor_names[j]),"est"],"*", factor_names[j])
}
}
}
return(lavaan_text)
}
# step 1. unconstrained model
## sem RAM text
lavaan_model <- get_lavaan_model_text(factor_structure)
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model_text <- function(factor_structure,lavaan_obj=NULL) {
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_ests[(fac_cov_ests$lhs==factor_names[i]) &
(fac_cov_ests$rhs==factor_names[j]),"est"],"*", factor_names[j])
}
}
}
return(lavaan_text)
}
get_lavaan_model_text
get_lavaan_model_text(constrained_struc, unconstrained_fit)
fac_cov_estimates_lavaan <- function(lavaan_model_obj,factor_structure) {
pars_est = lavaan_model_obj |> lavaan::parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est = pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
c('lhs','op','rhs','est')]
return(pars_est)
}
get_lavaan_model_text(constrained_struc, unconstrained_fit)
get_fac_cov_estimates_lavaan <- function(lavaan_model_obj,factor_structure) {
pars_est = lavaan_model_obj |> lavaan::parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est = pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
c('lhs','op','rhs','est')]
return(pars_est)
}
get_lavaan_model_text(constrained_struc, unconstrained_fit)
get_lavaan_model_text(factor_structure)
# step 1. unconstrained model
## sem RAM text
lavaan_model <- get_lavaan_model_text(factor_structure)
## the overall lavaan fit
unconstrained_fit <- lavaan::cfa(model = lavaan_model,
sample.cov = obs_cov,
sample.nobs = nrow(data))
unconstrained_fit
## factor covariance estimates
unconstrained_factor_cov <- fac_cov_estimates_lavaan(unconstrained_fit,factor_structure)
unconstrained_factor_cov
get_lavaan_model_text(constrained_struc, unconstrained_fit)
# the constrained sem RAM text
sem_model <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
unconstrained_fit
get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model_text <- function(factor_structure,lavaan_obj=NULL) {
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_est[(fac_cov_est$lhs==factor_names[i]) &
(fac_cov_est$rhs==factor_names[j]),"est"],"*", factor_names[j])
}
}
}
return(lavaan_text)
}
# Returns the observed pairwise complete covariance matrix.
get_obs_cov <- function(d) {
d <- d[, colSums(is.na(d)) < nrow(d)] # Remove columns which only contain NA
obs_cov <- cov(d, method = "pearson", use = "pairwise.complete.obs")
obs_cov
}
# Returns factor covariance estimates from an sem object.
fac_cov_estimates <- function(sem) {
n_factors <- sem$m - sem$n
coef <- fac2char(sem::stdCoef(sem))
n_coef <- nrow(sem::stdCoef(sem))
n_combins <- ncol(combn(n_factors,2))
factor_coef <- coef[(n_coef-n_combins+1):n_coef, 1:2]
colnames(factor_coef) <- c("covariance", "estimate")
rownames(factor_coef) <- NULL
factor_coef
}
get_fac_cov_estimates_lavaan <- function(lavaan_model_obj,factor_structure) {
pars_est = lavaan_model_obj |> lavaan::parameterestimates()
factor_names = names(factor_structure)
n_factors = length(factor_names)
pars_est = pars_est[(pars_est$lhs %in% factor_names) &
(pars_est$rhs %in% factor_names) &
(pars_est$op %in% '~~'),
c('lhs','op','rhs','est')]
return(pars_est)
}
get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
# the constrained sem RAM text
sem_model <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
sem_model
unconstrained_fit
constrained_struc
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model_text <- function(factor_structure,lavaan_obj=NULL) {
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_est[(fac_cov_est$lhs==factor_names[i]) &
(fac_cov_est$rhs==factor_names[j]),"est"],"*", factor_names[j])
lavaan_text = c(lavaan_text, factor_covariance)
}
}
}
return(lavaan_text)
}
# the constrained sem RAM text
sem_model <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
sem_model
d
nrow(d)
obs_cov
# the constrained sem RAM text
lavaan_model_c <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
# observed pairwise complete covariance matrix
obs_cov <- get_obs_cov(x)
## the overall lavaan fit
constrained_fits <- lavaan::cfa(model = lavaan_model_c,
sample.cov = obs_cov,
sample.nobs = nrow(data))
lavaan_model_c
unconstrained_fit
constrained_struc
# Returns a character vector of the 'RAM' model for rosetta
get_lavaan_model_text <- function(factor_structure,lavaan_obj=NULL) {
## check arguments
if(length(names(factor_structure)) != length(factor_structure) || any(names(factor_structure) == "")) {
stop("Check the 'factor_structure' argument in function rosetta:::sem_model(). 'factor_structure' needs to be a named list.")
}
x =  factor_structure
factor_names <- names(x)
n_factors <- length(factor_names)
lavaan_text = NULL
for(i in seq_along(factor_names)){
factor_structure[[i]]
fac_eq = paste0(factor_names[i]," =~ ",paste0(factor_structure[[i]],collapse = " + "))
lavaan_text = c(lavaan_text, fac_eq)
# constrain factor variance to 1
factor_variance = paste0(factor_names[i]," ~~ 1*", factor_names[i])
lavaan_text = c(lavaan_text, factor_variance)
}
if(!is.null(lavaan_obj)){
fac_cov_est = get_fac_cov_estimates_lavaan(lavaan_obj,factor_structure)
for(i in seq_along(factor_names)){
for(j in i:(n_factors)){
if(!j==i){
# constrain factor variance to 1
factor_covariance = paste0(factor_names[i]," ~~ ",
fac_cov_est[(fac_cov_est$lhs==factor_names[i]) &
(fac_cov_est$rhs==factor_names[j]),"est"],"*", factor_names[j])
lavaan_text = c(lavaan_text, factor_covariance)
}
}
}
}
return(lavaan_text)
}
get_lavaan_model_text(factor_structure)
## factor covariance estimates
unconstrained_factor_cov <- fac_cov_estimates_lavaan(unconstrained_fit,factor_structure)
?fscores
constrained_fits
# the constrained sem RAM text
lavaan_model_c <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
# observed pairwise complete covariance matrix
obs_cov <- get_obs_cov(x)
## the overall lavaan fit
constrained_fits <- lavaan::cfa(model = lavaan_model_c,
sample.cov = obs_cov,
sample.nobs = nrow(data))
constrained_fits
x
head(x)
lavaan::lavPredict(model = constrained_fit, data = x)
# model results
constrained_factor_scores <- lavaan::lavPredict(constrained_fit, data = x)
?lavPredict
lavaan::lavPredict(constrained_fit, newdata = x)
lavaan::lavPredict(constrained_fits, newdata = x)
constrained_factor_cov
constrained_factor_cov <- fac_cov_estimates(constrained_fit)
## the overall lavaan fit
constrained_fit <- lavaan::cfa(model = lavaan_model_c,
sample.cov = obs_cov,
sample.nobs = nrow(data))
# model results
constrained_factor_scores <- lavaan::lavPredict(constrained_fit, newdata = x)
constrained_factor_cov <- fac_cov_estimates(constrained_fit)
constrained_fit
constrained_factor_cov <- get_fac_cov_estimates_lavaan(constrained_fit,constrained_struc)
constrained_factor_cov
constrained_factor_scores
## factor covariance estimates
unconstrained_factor_cov <-
get_fac_cov_estimates_lavaan(unconstrained_fit,factor_structure)
## factor covariance estimates
unconstrained_factor_cov
# step 2. constrained model
constrained_fit_list <- lapply(d, function(x) {
constrained_struc <- lapply(factor_structure, function(y) {
intersect(names(x), y)
})
# the constrained sem RAM text
lavaan_model_c <- get_lavaan_model_text(constrained_struc, unconstrained_fit)
# observed pairwise complete covariance matrix
obs_cov <- get_obs_cov(x)
## the overall lavaan fit
constrained_fit <- lavaan::cfa(model = lavaan_model_c,
sample.cov = obs_cov,
sample.nobs = nrow(data))
# model results
constrained_factor_scores <- lavaan::lavPredict(constrained_fit, newdata = x)
constrained_factor_cov <- get_fac_cov_estimates_lavaan(constrained_fit,constrained_struc)
list(
constrained_fit = constrained_fit,
constrained_factor_scores = constrained_factor_scores,
constrained_factor_cov = constrained_factor_cov
)
})
constrained_fit_list
lapply(constrained_fit_list, `[[`, "constrained_factor_scores")
ret <- lapply(constrained_fit_list, `[[`, "constrained_factor_scores")
attr(ret, "unconstrained_fit") <- unconstrained_fit
attr(ret, "factor_covariance") <- unconstrained_factor_cov
attr(ret, "constrained_fit") <- lapply(constrained_fit_list, `[[`, "constrained_fit")
ret
?lavPredict
lavPredict()
?lavPredict()
lavPredict
library(lavaan)
lavPredict
